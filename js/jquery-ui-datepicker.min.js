class HotelCalendar {
  constructor(containerId, checkInId, checkOutId, prevId, nextId, checkInInputId, checkOutInputId, resetButtonId) {
    this.container = document.getElementById(containerId);
    this.checkInInput = document.getElementById(checkInInputId);
    this.checkOutInput = document.getElementById(checkOutInputId);
    this.checkInCalendar = document.getElementById(checkInId);
    this.checkOutCalendar = document.getElementById(checkOutId);
    this.prevMonthButton = document.getElementById(prevId);
    this.nextMonthButton = document.getElementById(nextId);
    this.resetButton = document.getElementById(resetButtonId);

    this.today = new Date();
    this.today.setHours(0, 0, 0, 0);

    this.checkInDate = null;
    this.checkOutDate = null;

    this.currentMonthIn = this.today.getMonth();
    this.currentYearIn = this.today.getFullYear();

    this.currentMonthOut = (this.currentMonthIn + 1) % 12;
    this.currentYearOut = (this.currentMonthIn + 1) > 11 ? this.currentYearIn + 1 : this.currentYearIn;

    this.initialize();
  }

  initialize() {
    this.renderCalendars();
    this.attachEventListeners();
  }

  renderCalendars() {
    this.renderCalendar(this.checkInCalendar, this.currentMonthIn, this.currentYearIn);
    this.renderCalendar(this.checkOutCalendar, this.currentMonthOut, this.currentYearOut);
    this.updateInputFields();
    this.updateNavigationButtons();
  }

  renderCalendar(calendarElement, month, year) {
    const daysInMonth = new Date(year, month + 1, 0).getDate();
    const firstDay = new Date(year, month, 1).getDay();

    let calendarHtml = '<table>';
    calendarHtml += '<tr><th>Su</th><th>Mo</th><th>Tu</th><th>We</th><th>Th</th><th>Fr</th><th>Sa</th></tr><tr>';

    let i;
    for (i = 0; i < firstDay; i++) {
      calendarHtml += '<td></td>';
    }

    for (let day = 1; day <= daysInMonth; day++) {
      const currentDate = new Date(year, month, day);
      let dateClass = '';
      if (currentDate < this.today) {
        dateClass = 'disabled';
      } else if (this.checkInDate && currentDate.getTime() === this.checkInDate.getTime()) {
        dateClass = 'start-date';
      } else if (this.checkOutDate && currentDate.getTime() === this.checkOutDate.getTime()) {
        dateClass = 'end-date';
      } else if (this.checkInDate && this.checkOutDate && currentDate > this.checkInDate && currentDate < this.checkOutDate) {
        dateClass = 'in-range';
      }
      calendarHtml += `<td class="${dateClass}" data-date="${currentDate.toISOString()}"><span>${day}</span></td>`;
      if (++i % 7 === 0) {
        calendarHtml += '</tr><tr>';
      }
    }

    while (i % 7 !== 0) {
      calendarHtml += '<td></td>';
      i++;
    }

    calendarHtml += '</tr></table>';
    calendarElement.querySelector('.calendarBody').innerHTML = calendarHtml;
    calendarElement.querySelector('.monthYear').textContent = `${new Date(year, month).toLocaleString('default', { month: 'long' })} ${year}`;
  }

  updateInputFields() {
    if (this.checkInDate) {
      this.checkInInput.value = `${this.checkInDate.getDate()} ${this.checkInDate.toLocaleString('default', { month: 'short' })} ${this.checkInDate.getFullYear()}`;
    } else {
      this.checkInInput.value = '';
    }

    if (this.checkOutDate) {
      this.checkOutInput.value = `${this.checkOutDate.getDate()} ${this.checkOutDate.toLocaleString('default', { month: 'short' })} ${this.checkOutDate.getFullYear()}`;
    } else {
      this.checkOutInput.value = '';
    }
  }

  updateNavigationButtons() {
    const today = new Date();
    if (this.currentYearIn === today.getFullYear() && this.currentMonthIn === today.getMonth()) {
      this.prevMonthButton.disabled = true;
    } else {
      this.prevMonthButton.disabled = false;
    }
  }

  attachEventListeners() {
    this.checkInCalendar.addEventListener('click', (event) => this.handleDateClick(event));
    this.checkOutCalendar.addEventListener('click', (event) => this.handleDateClick(event));

    this.prevMonthButton.addEventListener('click', () => this.changeMonth('prev'));
    this.nextMonthButton.addEventListener('click', () => this.changeMonth('next'));
    this.resetButton.addEventListener('click', () => this.resetDates());
  }

  handleDateClick(event) {
    let target = event.target;

    if (target.tagName.toLowerCase() === 'span') {
      target = target.parentElement;
    }

    if (target.tagName.toLowerCase() === 'td' && !target.classList.contains('disabled')) {
      const selectedDate = new Date(target.getAttribute('data-date'));

      if (this.checkInCalendar.contains(target)) {
        if (!this.checkInDate || (this.checkInDate && this.checkOutDate)) {
          this.checkInDate = selectedDate;
          this.checkOutDate = null;
        } else if (selectedDate < this.checkInDate) {
          this.checkInDate = selectedDate;
        } else {
          this.checkOutDate = selectedDate;
        }
      } else if (this.checkOutCalendar.contains(target)) {
        if (!this.checkInDate) {
          this.checkInDate = selectedDate;
          this.checkOutDate = null;
        } else if (selectedDate >= this.checkInDate) {
          this.checkOutDate = selectedDate;
        }
      }

      this.updateInputFields();
      this.renderCalendars();
    }
  }

  changeMonth(direction) {
    if (direction === 'prev') {
      if (this.currentMonthIn === 0) {
        this.currentMonthIn = 11;
        this.currentYearIn--;
      } else {
        this.currentMonthIn--;
      }

      if (this.currentMonthOut === 0) {
        this.currentMonthOut = 11;
        this.currentYearOut--;
      } else {
        this.currentMonthOut--;
      }

    } else if (direction === 'next') {
      if (this.currentMonthIn === 11) {
        this.currentMonthIn = 0;
        this.currentYearIn++;
      } else {
        this.currentMonthIn++;
      }

      if (this.currentMonthOut === 11) {
        this.currentMonthOut = 0;
        this.currentYearOut++;
      } else {
        this.currentMonthOut++;
      }
    }

    this.renderCalendars();
  }

  resetDates() {
    this.checkInDate = null;
    this.checkOutDate = null;
    this.currentMonthIn = this.today.getMonth();
    this.currentYearIn = this.today.getFullYear();
    this.currentMonthOut = (this.currentMonthIn + 1) % 12;
    this.currentYearOut = (this.currentMonthIn + 1) > 11 ? this.currentYearIn + 1 : this.currentYearIn;
    this.renderCalendars();
    this.updateInputFields();
  }
}

// Instantiate the calendar pairs with the reset button
document.addEventListener("DOMContentLoaded", () => {
  const createHotelCalendar = (pairId, checkInId, checkOutId, prevMonthId, nextMonthId, checkInInputId, checkOutInputId, resetId) => {
    if (document.getElementById(pairId)) {
      new HotelCalendar(pairId, checkInId, checkOutId, prevMonthId, nextMonthId, checkInInputId, checkOutInputId, resetId);
    }
  };

  createHotelCalendar('calendarPair1', 'checkInCalendar1', 'checkOutCalendar1', 'prevMonth1', 'nextMonth1', 'checkInInput1', 'checkOutInput1', 'reset1');
  createHotelCalendar('calendarPair2', 'checkInCalendar2', 'checkOutCalendar2', 'prevMonth2', 'nextMonth2', 'checkInInput2', 'checkOutInput2', 'reset2');
  createHotelCalendar('calendarPair3', 'checkInCalendar3', 'checkOutCalendar3', 'prevMonth3', 'nextMonth3', 'checkInInput3', 'checkOutInput3', 'reset3');
});